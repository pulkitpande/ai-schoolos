version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://api-gateway:8000
      - NEXT_PUBLIC_APP_NAME=AI SchoolOS
      - NEXT_PUBLIC_APP_VERSION=1.0.0
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile.api-gateway
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    depends_on:
      auth-service:
        condition: service_healthy
      student-service:
        condition: service_healthy
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service
  auth-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: auth-service
        SERVICE_PORT: 8001
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=auth-service
      - SERVICE_PORT=8001
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Student Service
  student-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: student-service
        SERVICE_PORT: 8002
    ports:
      - "8002:8002"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=student-service
      - SERVICE_PORT=8002
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Staff Service
  staff-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: staff-service
        SERVICE_PORT: 8003
    ports:
      - "8003:8003"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=staff-service
      - SERVICE_PORT=8003
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Service
  ai-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: ai-service
        SERVICE_PORT: 8004
    ports:
      - "8004:8004"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=ai-service
      - SERVICE_PORT=8004
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Analytics Service
  analytics-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: analytics-service
        SERVICE_PORT: 8005
    ports:
      - "8005:8005"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=analytics-service
      - SERVICE_PORT=8005
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notification-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: notification-service
        SERVICE_PORT: 8006
    ports:
      - "8006:8006"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=notification-service
      - SERVICE_PORT=8006
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Communication Service
  communication-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: communication-service
        SERVICE_PORT: 8007
    ports:
      - "8007:8007"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=communication-service
      - SERVICE_PORT=8007
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Attendance Service
  attendance-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: attendance-service
        SERVICE_PORT: 8008
    ports:
      - "8008:8008"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=attendance-service
      - SERVICE_PORT=8008
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Timetable Service
  timetable-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: timetable-service
        SERVICE_PORT: 8009
    ports:
      - "8009:8009"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=timetable-service
      - SERVICE_PORT=8009
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Exam Service
  exam-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: exam-service
        SERVICE_PORT: 8010
    ports:
      - "8010:8010"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=exam-service
      - SERVICE_PORT=8010
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Library Service
  library-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: library-service
        SERVICE_PORT: 8011
    ports:
      - "8011:8011"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=library-service
      - SERVICE_PORT=8011
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Homework Service
  homework-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: homework-service
        SERVICE_PORT: 8012
    ports:
      - "8012:8012"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=homework-service
      - SERVICE_PORT=8012
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Fee Service
  fee-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: fee-service
        SERVICE_PORT: 8013
    ports:
      - "8013:8013"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=fee-service
      - SERVICE_PORT=8013
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Transport Service
  transport-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: transport-service
        SERVICE_PORT: 8014
    ports:
      - "8014:8014"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=transport-service
      - SERVICE_PORT=8014
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Config Service
  config-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: config-service
        SERVICE_PORT: 8015
    ports:
      - "8015:8015"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=config-service
      - SERVICE_PORT=8015
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Super Admin Service
  super-admin-service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: super-admin-service
        SERVICE_PORT: 8016
    ports:
      - "8016:8016"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - SERVICE_NAME=super-admin-service
      - SERVICE_PORT=8016
    networks:
      - ai-schoolos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  ai-schoolos-network:
    driver: bridge 