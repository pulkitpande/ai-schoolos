# Development Dockerfile for AI SchoolOS Frontend
FROM node:18-alpine

# Install additional dependencies for development
RUN apk add --no-cache \
    curl \
    git \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package.json package-lock.json* ./

# Install dependencies with multiple fallback methods to handle npm issues
RUN npm ci --no-audit --no-fund || \
    npm ci --legacy-peer-deps || \
    npm ci --force || \
    npm install --no-optional || \
    npm install --legacy-peer-deps --no-audit --no-fund

# Copy source code
COPY . .

# Create environment file if it doesn't exist
RUN if [ ! -f .env.local ]; then \
    echo "NEXT_PUBLIC_API_URL=http://localhost:8000" > .env.local && \
    echo "NEXT_PUBLIC_APP_NAME=AI SchoolOS" >> .env.local && \
    echo "NEXT_PUBLIC_APP_VERSION=1.0.0" >> .env.local; \
    fi

# Set environment variables
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# Expose port
EXPOSE 3000

# Health check for development
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

# Start development server
CMD ["npm", "run", "dev"] 